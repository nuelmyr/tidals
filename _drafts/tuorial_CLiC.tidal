Intento de descripción del funcionamiento de algunos Comandos en TidalCycles (y en otros lados también)
//COPIAR EN ATOM\\                        

d1 $ s "arpy(e,p,g)"

El algoritmo euclideano (o euclidean en ingles) divide al ciclo en P (pasos) y ocupa E (eventos) en el. 
La cuenta que hace es dividir a E sobre P pero sin decimales así que agrupa "de la manera mas pareja posible", 
dando por resultados ritmos piolas. A su vez si ponemos valor a G (golpe) va a mover el comienzo de frase y por lo tanto cambiando el resultado sonoro. 
Esto es genial y se puede usar de muchas maneras.

d1 $ stack[
  s "arpy(3,8)",
  s "arpy(3,8,2)" # up "-2",
  s "arpy(3,8,6)" # up "-5",
  s "arpy(3?,8,4)" # up "-12",
  s "ht:1(5,8)",
  s "ht:2(5,8,3)",
  s "~"
]

Es interesante como se aglutinan el mismo sample con distintas alturas, o distintos samples que representan partes de una bateria (o como quieran usarlo)
# up "valor" mueve a nuestro sample dentro de una escala cromatica (osea en semitonos)
? le da 50% de posibilidades de sonar o no sonar al evento en cuestión, en este caso, puede ser que sean 3 E o menos, o ninguno.
Los patitos < > (o picos) nos van a dar un valor por ciclo, lo que nos puede servír en este caso para cambiár el lugar de G y 
modificar el ritmo de un ciclo al siguiente modificar P y tener menos o mas pasos o cambiar E y modificar cuantos eventos sonaran por ciclo.//

d2 $ stack[
palindrome $ s "arpy(3,8)" # up "-12",
s "[jvbass(3,8,2)]*2",
s "[latibro(3,8,4)]/2" # up "7",
s "~"
]

El efecto palindrome (palindromo, como el capicúa "arriba la birra") genera ese efecto sobre el algoritmo euclideano (y en cualquier lista de samples/eventos)
dandonos el patron e invertido sobre p (osea nos va a dar vuelta el 3 3 2 que hacemos con (3,8) o el ritmo que tengamos, osea re garpa[1]). 
Guarda, si no me equivoco, palindrome toca si o si tanto el originál como el capicúa osea que si usamos <> durara el doble de ciclos (puede no garpar?).

Poner el algoritmo por fuera de los corchetes [] acomodara la lista de samples sobre P tomando el orden de los samples como si fuera G, es decír que el primer
sample tendra los eventos desde el primer lugar, el segundo desde el segundo, y así. Si queremos ubicar algun sample en otro lugar de G podemos usar ~ como silencio.

d3 $ s "[arpy ~ ~ ht ~ ~ cp ~ ~](3,8)"

Podemos correr a su vez a todo el patron sobre G, poniendole un valor mayor a 0 a este.

Si usamos el algoritmo en un solo evento este puede ser duplicado o dividido por fuera de los corchetes, igual que cualquier patron de samples.

d4 $ stack[
s "[bassfoo(3,8)]*2" # gain "0.9",
s "[jvbass(5,8,<2 5>)]/2" # gain "1.3",
s "~"
]


original         capicúa
(3,8)   E + + E + + E +  + E + + E + + E
(3,8,1) + E + + E + + E  E + + E + + E +
(3,8,2) E + E + + E + +  + + E + + E + E
(3,8,3) + E + E + + E +  + E + + E + E +
(3,8,4) + + E + E + + E  E + + E + E + +
(3,8,5) E + + E + E + +  + + E + E + + E
(3,8,6) + E + + E + E +  + E + E + + E +
(3,8,7) + + E + + E + E  E + E + + E + +

La lista anteriór grafica el resultado del euclideano de 3 sobre 8, imaginense cambiar estos valores de manera aleatoria, por listas, o de multiples maneras.
Esto aquí presente se estudia mucho en general y es interesante el desafio de incorporarlo corporalmente, a demás de usarlo en nuestro código. 
También es interesante el resultado sonoro que nos da usar el mismo sample o sinte con distintas alturas, 
dandonos como resultado una __sensación__ de tambor o algo similar.

[1] buscar paper "euclidean rythm on algorithmic music" autor ¿?  

-----------------------------------------

Nuevos Efectos de SuperDirt - WINDOWS

Actualizar SuperDirt yendo a la consola (cmd) buscar la carpeta de SuperDirt 
[en mi caso ..c: usuarios/ nombre de user/ AppData/Local/Supercollider/downloaded-quarks/SuperDirt ]
ejecutar el comando `git checkout develop` deberia andar

Código para SuperCollider [para que funcione]

https://github.com/musikinformatik/SuperDirt/blob/develop/library/default-effects-extra.scd

//instalar todo, compilar la clase de SC (languaje/compile class library), arrancar SuperDirt, correr el codigo de de aca arriba

Copiar este codigo en atom~~~~
~~~~>Codigo para Atom [modo tutorial]

https://gist.github.com/jarmitage/c8fba2a94f7219e984df8772f96e30d0

Doc google en plan tutorial

https://docs.google.com/document/d/1P-_DGKtdJKyVsjQKAjCWlLBlI8hA_5XKrGwErK6FNhw/edit




